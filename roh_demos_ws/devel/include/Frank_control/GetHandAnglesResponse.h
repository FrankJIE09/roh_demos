// Generated by gencpp from file Frank_control/GetHandAnglesResponse.msg
// DO NOT EDIT!


#ifndef FRANK_CONTROL_MESSAGE_GETHANDANGLESRESPONSE_H
#define FRANK_CONTROL_MESSAGE_GETHANDANGLESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace Frank_control
{
template <class ContainerAllocator>
struct GetHandAnglesResponse_
{
  typedef GetHandAnglesResponse_<ContainerAllocator> Type;

  GetHandAnglesResponse_()
    : thumb_bend(0.0)
    , index_bend(0.0)
    , middle_bend(0.0)
    , ring_bend(0.0)
    , pinky_bend(0.0)
    , thumb_rot(0.0)
    , detected(false)  {
    }
  GetHandAnglesResponse_(const ContainerAllocator& _alloc)
    : thumb_bend(0.0)
    , index_bend(0.0)
    , middle_bend(0.0)
    , ring_bend(0.0)
    , pinky_bend(0.0)
    , thumb_rot(0.0)
    , detected(false)  {
  (void)_alloc;
    }



   typedef float _thumb_bend_type;
  _thumb_bend_type thumb_bend;

   typedef float _index_bend_type;
  _index_bend_type index_bend;

   typedef float _middle_bend_type;
  _middle_bend_type middle_bend;

   typedef float _ring_bend_type;
  _ring_bend_type ring_bend;

   typedef float _pinky_bend_type;
  _pinky_bend_type pinky_bend;

   typedef float _thumb_rot_type;
  _thumb_rot_type thumb_rot;

   typedef uint8_t _detected_type;
  _detected_type detected;





  typedef boost::shared_ptr< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetHandAnglesResponse_

typedef ::Frank_control::GetHandAnglesResponse_<std::allocator<void> > GetHandAnglesResponse;

typedef boost::shared_ptr< ::Frank_control::GetHandAnglesResponse > GetHandAnglesResponsePtr;
typedef boost::shared_ptr< ::Frank_control::GetHandAnglesResponse const> GetHandAnglesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator1> & lhs, const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.thumb_bend == rhs.thumb_bend &&
    lhs.index_bend == rhs.index_bend &&
    lhs.middle_bend == rhs.middle_bend &&
    lhs.ring_bend == rhs.ring_bend &&
    lhs.pinky_bend == rhs.pinky_bend &&
    lhs.thumb_rot == rhs.thumb_rot &&
    lhs.detected == rhs.detected;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator1> & lhs, const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace Frank_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ae6e268c4bfe9632c21995915fa1b5ce";
  }

  static const char* value(const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xae6e268c4bfe9632ULL;
  static const uint64_t static_value2 = 0xc21995915fa1b5ceULL;
};

template<class ContainerAllocator>
struct DataType< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Frank_control/GetHandAnglesResponse";
  }

  static const char* value(const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 thumb_bend\n"
"float32 index_bend\n"
"float32 middle_bend\n"
"float32 ring_bend\n"
"float32 pinky_bend\n"
"float32 thumb_rot\n"
"bool detected \n"
;
  }

  static const char* value(const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.thumb_bend);
      stream.next(m.index_bend);
      stream.next(m.middle_bend);
      stream.next(m.ring_bend);
      stream.next(m.pinky_bend);
      stream.next(m.thumb_rot);
      stream.next(m.detected);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetHandAnglesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::Frank_control::GetHandAnglesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::Frank_control::GetHandAnglesResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "thumb_bend: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_bend);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "index_bend: ";
    Printer<float>::stream(s, indent + "  ", v.index_bend);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "middle_bend: ";
    Printer<float>::stream(s, indent + "  ", v.middle_bend);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "ring_bend: ";
    Printer<float>::stream(s, indent + "  ", v.ring_bend);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "pinky_bend: ";
    Printer<float>::stream(s, indent + "  ", v.pinky_bend);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "thumb_rot: ";
    Printer<float>::stream(s, indent + "  ", v.thumb_rot);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRANK_CONTROL_MESSAGE_GETHANDANGLESRESPONSE_H
